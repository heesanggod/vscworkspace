

import java.util.Scanner;

public class A_solo2 {

	public static void main(String[] args) {
				// 홀수 마방진
				// n x n 배열
		Scanner scanner = new Scanner(System.in);
			int n = scanner.nextInt();
			
			int [][] maSq = new int [n][n];
			// n x n 크기의 2차원 배열 maSq를 선언하여 마방진을 저장할 공간을 마련한다
			
			int num = 1; // num은 현재 마방진에 배치될 숫자를 나타낸다. 초기값은 1이다
			int x = 0; // x는 현재 숫자가 배치될 행의 인덱스를 나타낸다. 초기값은 0으로 설정되어 첫 번째 행에서 시작한다
			int y = n / 2; // y는 현재 숫자가 배치될 열의 인덱스를 나타낸다. 초기값은 n의 중간 열로 설정되어 해당 열에서 시작한다
			
			int x1; 
			int y1;
			// x1과 y1은 현재 위치를 저장하기 위한 임시 변수이며, 나중에 현재 위치를 변경한 후에 이전 위치를 기억해야 할 때 사용된다
			
			while (num <= n * n) {
				maSq[x][y] = num;
				num++;
				x1 = x;
				y1 = y;
				// 현재 위치 (x, y)를 임시로 x1과 y1에 저장한다
				// 이는 나중에 현재 위치가 변경될 때 이전 위치를 기억하기 위한 것
				x -= 1;   // x--;
				y += 1;   // y++;
				// 현재 위치를 왼쪽 위 대각선 방향으로 이동
				// x는 위로 한 칸, y는 오른쪽으로 한 칸 이동
				
				if (x == -1) {  // 배열의 범위를 벗어나면 배열의 경계로 이동시키는 구간
					// 만약 x가 -1이 되면(즉, 배열의 맨 위로 이동하려고 할 때) 
					// x를 배열의 가장 아래 인덱스인 n - 1로 설정한다 
					// 배열의 맨 위에서 아래로 이동할 때 배열의 아래쪽 끝으로 이동하게 된다
					x = n - 1;
				}
				if (y == n) {
					y = 0;
					// 만약 y가 n이 되면(즉, 배열의 오른쪽 끝으로 이동하려고 할 때)
					// y를 0으로 설정함, 배열의 오른쪽 끝에서 왼쪽으로 이동할 때 배열의 왼쪽 끝으로 이동하게 된다
				}
				
				if (maSq[x][y] !=0) { // 현재위치에 이미 숫자가 채워져있다면,
					x = x1 + 1; // x를 이전 위치 x1에서 아래로 한 칸 이동한 위치로 설정한다.
					// 현재 위치 (x, y)에서 아래로 한 칸 이동하게 된다
					y = y1; // y를 이전 위치 y1로 설정, 현재 위치 (x, y)에서 가로 방향은 이동하지 않게 된다
					if (x == -1) {
						x = n -1;
						// 위에서 이동한 후에 x가 -1이 되는 경우, 즉 배열의 맨 위로 이동하려고 할 때, 
						// x를 배열의 가장 아래 인덱스인 n - 1로 설정한다 
						// 배열의 맨 위에서 아래로 이동할 때 배열의 아래쪽 끝으로 이동하게 된다
					}
				}
			}
			
			for (int i = 0; i < maSq.length; i++) {
				for (int j = 0; j < maSq.length; j++) {
					System.out.print(maSq[i][j] + " ");
				}
				System.out.println();
			}
		}
		
		

	

}
